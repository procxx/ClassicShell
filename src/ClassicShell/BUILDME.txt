Classic Shell build instructions


///////////////////////////////////////////////////////////////////////////////

1) Required tools

* Visual Studio 2008 with Platform SDK

* HTML Help Workshop - http://www.microsoft.com/downloads/details.aspx?FamilyID=00535334-c8a6-452f-9aa0-d597d16580cc&displaylang=en

* WiX 3.0 - http://wix.codeplex.com/

Make sure the help compiler hhc.exe and the wix tools light and candle are
in the PATH.


///////////////////////////////////////////////////////////////////////////////

2) Build the project

Go to the ClassicShell\ClassicShellSetup folder and run BuildInstaller.bat.
It will compile all code, rebuild the help, create the 32 and 64-bit MSI files
and package everything in one bootstrapper exe. The final exe will be in
ClassicShell\ClassicShellSetup\Release


///////////////////////////////////////////////////////////////////////////////

3) The build process in detail

BuildInstaller.bat does a few things:

A. Compiles the ClassicShell solution for the Setup|Win32 configuration.
   This includes the 32-bit ClassicExplorer and ClassicStartMenu, the skins
   for the start menu, the ClassicShellSetup tool, and the SetupHelper tool.

B. Compiles the ClassicShell solution for the Setup|x64 configuration.
   This includes the 64-bit ClassicExplorer and ClassicStartMenu.

C. Compiles the CHM help file from the Docs\Help\ClassicShell.hhp project.

D. Uses the SetupHelper tool to calculate the checksums for all ini files.
   The checksums are saved in inichecksum.bin. They are used during uninstall
   to detect modified ini files.

E. Builds the 32-bit and 64-bit MSI files using WiX.

F. Builds the final setup exe using the ClassicShellSetup solution.


///////////////////////////////////////////////////////////////////////////////

4) Localization

There are multiple aspects of localizing Classic Shell for a specific language.

A. The L10N files
-----------------
Most of the UI text is separated from the executables and placed in 2 INI files:
ExplorerL10N.ini and StartMenuL10N.ini. The files contain one section for every
supported language. The code reads the section that belongs to the current language.
The text covers all UI except the settings dialogs.


B. The Settings UI
------------------
The Settings UI and some diagnostic messages are resources embedded in the DLLs.
There are 2 ways to localize them. One is to replace the resources inside the
DLLs. Another way is to provide an additional DLL with just those resources.
The DLL must be 32-bit and have the name of the language (for example ja-JP.dll).
The DLL must provide the following resources:

- A version resource that matches the version of Classic Shell. If the versions
  don't match the DLL will be ignored. This is done to prevent problems with
  missing resources or dialog controls when DLL from one version are used by
  another

- The settings dialog with ID=2001 from ClassicExplorer32.dll

- The whole string table from ClassicExplorer32.dll. The string IDs start from
  2001 and go up

- The settings dialog with ID=3001 from ClassicStartMenuDLL.dll

- The whole string table from ClassicStartMenuDLL.dll. The string IDs start from
  3001 and go up

The same resource DLL is used for both Classic Explorer and Classic Start Menu.
The resource IDs are specifically chosen so there is no conflict between the
two components.

You can use the provided en-US.dll file as an example. All you need to do is
translate all the contents of that dll and rename it to the name of your language.


C. Help and documentation
-------------------------
It is possible to translate the CHM help file and the comments in the INI files.
The easiest way to translate the CHM is to translate the source HTML files and
recompile the file with the HTML Help Workshop.
NOTE: When translating the INI file make sure they are saved in UTF-8 or UTF-16
format. If they are ANSI, the text may look good on your machine but may be all
messed up on somebody else's computer.
IMPORTANT NOTE: When translating the INI files make sure you run the SetupHelper
tool to recalculate the inichecksum.bin file. See section 3-D above.
Otherwise the INI files will be considered "modified" during uninstall.


D. Installer
------------
The installer can also be localized. The easiest way is to rebuild the installer
from its source code and provide a different WXL file for the installer text.
In extreme cases it may be necessary to resize some of the controls in the WXS
file to make the text fit.
Please refer to the WiX documentation for details.
